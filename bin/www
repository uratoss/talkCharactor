#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('talkcharactor:server');
var http = require('http');
var exec = require('child_process').exec;
var rq = require('request-promise');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
var socketIO = require('socket.io');
var io = socketIO.listen(server);

io.on('connection',function(socket){
  console.log('connecting!');
  socket.on('disconnect',function() {
    console.log('disconecting');
  });

  socket.on('message',function(umsg){
    console.log(umsg);
    var options = {
        method: 'POST',
        uri: 'http://127.0.0.1:5000/predict',
        json: {
            xs: umsg
        },
    };
    rq(options)
    .then(function (parsedBody) {
        ys = parsedBody['ys'];
        io.emit('message',ys);
        console.log(ys);
    })
    .catch(function (err) {
        console.log('post failed');
        console.log(err);
    });
    //var com = 'python python/generator_commandline.py '+umsg+' -m predictor.npz';
    //exec(com,function (error,stdout,stderr) {
    //    if(error !== null){
    //      console.log('exec error: '+error);
    //      return;
    //    }
    //    cmsg = stdout
    //    io.emit('message',cmsg);
    //    console.log(stdout);
    //});
  });
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
